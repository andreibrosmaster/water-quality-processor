name: Process Water Quality Images

on:
  push:
    paths:
      - 'images/**'
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: write
  actions: read

jobs:
  process-images:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libvips-dev
    
    - name: Get changed image files
      id: changed-files
      run: |
        echo "üîç Detecting changed files..."
        
        # Get added and modified image files only (exclude deleted)
        ADDED_MODIFIED_FILES=$(git diff --name-only --diff-filter=AM HEAD~1 HEAD | grep '^images/' | grep -E '\.(jpg|jpeg|png|webp|tiff|bmp)$' || true)
        
        # Get deleted image files
        DELETED_FILES=$(git diff --name-only --diff-filter=D HEAD~1 HEAD | grep '^images/' | grep -E '\.(jpg|jpeg|png|webp|tiff|bmp)$' || true)
        
        echo "Added/Modified files:"
        echo "$ADDED_MODIFIED_FILES"
        echo "Deleted files:"
        echo "$DELETED_FILES"
        
        # Save files to environment and outputs
        if [ -n "$ADDED_MODIFIED_FILES" ]; then
          echo "has_files_to_process=true" >> $GITHUB_OUTPUT
          echo "$ADDED_MODIFIED_FILES" > /tmp/files_to_process.txt
          echo "files_to_process<<EOF" >> $GITHUB_OUTPUT
          echo "$ADDED_MODIFIED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          FILE_COUNT=$(echo "$ADDED_MODIFIED_FILES" | wc -l)
          echo "process_count=$FILE_COUNT" >> $GITHUB_OUTPUT
        else
          echo "has_files_to_process=false" >> $GITHUB_OUTPUT
          echo "process_count=0" >> $GITHUB_OUTPUT
        fi
        
        if [ -n "$DELETED_FILES" ]; then
          echo "has_deleted_files=true" >> $GITHUB_OUTPUT
          echo "deleted_files<<EOF" >> $GITHUB_OUTPUT
          echo "$DELETED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "has_deleted_files=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Skip processing for deletions only
      if: steps.changed-files.outputs.has_files_to_process == 'false' && steps.changed-files.outputs.has_deleted_files == 'true'
      run: |
        echo "‚ÑπÔ∏è  Only deleted files detected. Skipping image processing."
        echo "Deleted files:"
        echo "${{ steps.changed-files.outputs.deleted_files }}"
        echo "‚úÖ Workflow completed - no processing needed for deletions"
        exit 0
    
    - name: Skip processing if no files to process
      if: steps.changed-files.outputs.has_files_to_process == 'false' && steps.changed-files.outputs.has_deleted_files == 'false'
      run: |
        echo "‚ÑπÔ∏è  No image files to process (no additions, modifications, or deletions detected)"
        echo "‚úÖ Workflow completed - no action needed"
        exit 0
    
    - name: Process new/modified images
      id: process-images
      if: steps.changed-files.outputs.has_files_to_process == 'true'
      env:
        FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
        FIREBASE_DATABASE_URL: ${{ secrets.FIREBASE_DATABASE_URL }}
        NODE_ENV: production
      run: |
        echo "üöÄ Starting image processing workflow..."
        echo "Processing ${{ steps.changed-files.outputs.process_count }} files"
        
        SUCCESS_COUNT=0
        FAILED_COUNT=0
        PROCESSED_FILES=""
        
        # Process each file
        while IFS= read -r file; do
          if [ -n "$file" ]; then
            echo "üîÑ Processing: $file"
            
            if [ -f "$file" ]; then
              # Run the processing script with timeout
              if timeout 300 node scripts/process-image.js "$file"; then
                echo "‚úÖ Successfully processed: $file"
                SUCCESS_COUNT=$((SUCCESS_COUNT + 1))
                PROCESSED_FILES="$PROCESSED_FILES $file"
              else
                echo "‚ùå Failed to process: $file"
                FAILED_COUNT=$((FAILED_COUNT + 1))
              fi
            else
              echo "‚ö†Ô∏è  File not found: $file"
              FAILED_COUNT=$((FAILED_COUNT + 1))
            fi
          fi
        done < /tmp/files_to_process.txt
        
        echo "üìä Processing Summary:"
        echo "Total files: ${{ steps.changed-files.outputs.process_count }}"
        echo "Successfully processed: $SUCCESS_COUNT"
        echo "Failed: $FAILED_COUNT"
        
        # Save processed files for cleanup
        echo "$PROCESSED_FILES" > /tmp/successfully_processed.txt
        
        # Set outputs
        echo "success_count=$SUCCESS_COUNT" >> $GITHUB_OUTPUT
        echo "failed_count=$FAILED_COUNT" >> $GITHUB_OUTPUT
        
        # Exit with error if any processing failed
        if [ $FAILED_COUNT -gt 0 ]; then
          echo "‚ùå Some files failed to process"
          exit 1
        fi
        
        echo "üéâ All images processed successfully!"
    
    - name: Clean up processed images
      if: steps.changed-files.outputs.has_files_to_process == 'true' && success()
      run: |
        echo "üßπ Starting cleanup of successfully processed images..."
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        DELETED_COUNT=0
        DELETED_FILES=""
        
        # Read successfully processed files
        if [ -f "/tmp/successfully_processed.txt" ]; then
          PROCESSED_FILES=$(cat /tmp/successfully_processed.txt)
          
          for file in $PROCESSED_FILES; do
            if [ -n "$file" ] && [ -f "$file" ]; then
              echo "üóëÔ∏è  Removing: $file"
              git rm "$file"
              DELETED_COUNT=$((DELETED_COUNT + 1))
              DELETED_FILES="$DELETED_FILES $file"
            fi
          done
        fi
        
        # Commit and push if files were deleted
        if [ $DELETED_COUNT -gt 0 ]; then
          git commit -m "üßπ Auto-cleanup: Remove $DELETED_COUNT processed images [skip ci]
          
          Processed and removed:
          $DELETED_FILES
          
          Workflow: ${{ github.workflow }}
          Run ID: ${{ github.run_id }}
          Commit: ${{ github.sha }}"
          
          # Push with retry logic
          MAX_RETRIES=3
          RETRY_COUNT=0
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
            if git push; then
              echo "‚úÖ Successfully pushed cleanup changes"
              break
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              echo "‚ö†Ô∏è  Push failed, retrying... ($RETRY_COUNT/$MAX_RETRIES)"
              sleep 5
              
              if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
                echo "‚ùå Failed to push after $MAX_RETRIES attempts"
                exit 1
              fi
            fi
          done
          
          echo "‚úÖ Cleanup completed - removed $DELETED_COUNT files"
        else
          echo "‚ÑπÔ∏è  No files to clean up"
        fi
    
    - name: Workflow summary
      if: always()
      run: |
        echo "üìä Workflow Summary:"
        echo "Repository: ${{ github.repository }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Workflow Status: ${{ job.status }}"
        echo "Trigger Event: ${{ github.event_name }}"
        echo ""
        
        # Show file statistics
        if [ "${{ steps.changed-files.outputs.has_files_to_process }}" = "true" ]; then
          echo "Files processed: ${{ steps.changed-files.outputs.process_count }}"
          echo "Successfully processed: ${{ steps.process-images.outputs.success_count || '0' }}"
          echo "Failed: ${{ steps.process-images.outputs.failed_count || '0' }}"
        fi
        
        if [ "${{ steps.changed-files.outputs.has_deleted_files }}" = "true" ]; then
          echo "Files deleted in this commit: detected"
        fi
        
        echo ""
        echo "Timestamp: $(date -u)"
        
        # Final status
        if [ "${{ job.status }}" = "success" ]; then
          echo "üéâ Water quality image processing completed successfully!"
        else
          echo "‚ùå Workflow completed with issues"
        fi
    
    - name: Notify completion
      if: success() && steps.changed-files.outputs.has_files_to_process == 'true'
      run: |
        echo "üîî Processing Notification:"
        echo "Successfully processed and cleaned up ${{ steps.changed-files.outputs.process_count }} water quality images"
        echo "Repository: ${{ github.repository }}"
        echo "Branch: ${{ github.ref_name }}"
        echo "Commit: ${{ github.sha }}"
        echo "Workflow Run: ${{ github.run_id }}"
        echo "Timestamp: $(date -u)"
