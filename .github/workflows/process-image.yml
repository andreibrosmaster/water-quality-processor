name: Process Water Quality Images
on:
  push:
    paths:
      - 'images/**'
    branches: [ main ]
  workflow_dispatch:

jobs:
  process-image:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 2
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '22'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Install system dependencies for Sharp
      run: |
        sudo apt-get update
        sudo apt-get install -y libvips-dev
    
    - name: Get changed files
      id: changed-files
      run: |
        # Get the list of changed image files
        CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD | grep '^images/' | grep -E '\.(jpg|jpeg|png|webp|tiff|bmp)$' || echo "")
        echo "Changed files: $CHANGED_FILES"
        echo "files=$CHANGED_FILES" >> $GITHUB_OUTPUT
        
        # Convert to array for easier processing
        if [ -n "$CHANGED_FILES" ]; then
          echo "has_files=true" >> $GITHUB_OUTPUT
        else
          echo "has_files=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Process images
      if: steps.changed-files.outputs.has_files == 'true'
      env:
        FIREBASE_SERVICE_ACCOUNT: ${{ secrets.FIREBASE_SERVICE_ACCOUNT }}
        FIREBASE_DATABASE_URL: ${{ secrets.FIREBASE_DATABASE_URL }}
        NODE_ENV: production
      run: |
        echo "üöÄ Starting image processing workflow..."
        
        # Process each changed image file
        for file in ${{ steps.changed-files.outputs.files }}; do
          if [ -f "$file" ]; then
            echo "üîÑ Processing $file"
            node scripts/process-image.js "$file"
            
            # Check if processing was successful
            if [ $? -eq 0 ]; then
              echo "‚úÖ Successfully processed $file"
            else
              echo "‚ùå Failed to process $file"
              exit 1
            fi
          else
            echo "‚ö†Ô∏è  File not found: $file"
          fi
        done
        
        echo "üéâ All images processed successfully!"
    
    - name: Clean up processed images
      if: steps.changed-files.outputs.has_files == 'true'
      run: |
        echo "üßπ Starting cleanup of processed images..."
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Remove processed images
        DELETED_FILES=""
        for file in ${{ steps.changed-files.outputs.files }}; do
          if [ -f "$file" ]; then
            echo "üóëÔ∏è  Deleting $file"
            git rm "$file"
            DELETED_FILES="$DELETED_FILES $file"
          fi
        done
        
        # Commit and push changes if files were deleted
        if [ -n "$DELETED_FILES" ]; then
          git commit -m "üßπ Remove processed images: $DELETED_FILES [skip ci]"
          git push
          echo "‚úÖ Cleanup completed - deleted files: $DELETED_FILES"
        else
          echo "‚ÑπÔ∏è  No files to clean up"
        fi
    
    - name: Post-processing summary
      if: always()
      run: |
        echo "üìä Post-processing summary:"
        echo "Files processed: ${{ steps.changed-files.outputs.files }}"
        echo "Cleanup completed: ${{ steps.changed-files.outputs.has_files }}"
        echo "Workflow status: ${{ job.status }}"
        
        # Log final status
        if [ "${{ job.status }}" = "success" ]; then
          echo "üéâ Water quality image processing workflow completed successfully!"
        else
          echo "‚ùå Workflow completed with issues"
        fi
    
    - name: Notify completion
      if: success()
      run: |
        echo "üîî Processing notification:"
        echo "- Repository: ${{ github.repository }}"
        echo "- Branch: ${{ github.ref_name }}"
        echo "- Commit: ${{ github.sha }}"
        echo "- Processed files: ${{ steps.changed-files.outputs.files }}"
        echo "- Timestamp: $(date -u)"
